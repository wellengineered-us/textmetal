<?xml version="1.0" encoding="utf-8"?>

<!--
	Copyright Â©2020-2021 WellEngineered.us, all rights reserved.
	Distributed under the MIT license: http://www.opensource.org/licenses/mit-license.php
-->
<Template xmlns="http://www.textmetal.com/api/v6.0.0">

	<Alloc token="FolderName" />

	<Assign token="FolderName">
		<Assign.Expression>
			<Value data="Procedures" />
		</Assign.Expression>
	</Assign>

	<ForEach in="Schemas" var-ct="_LoopCount" var-ix="_LoopIndex">
		<ForEach.Filter></ForEach.Filter>
		<ForEach.Body>

			<ForEach in="Procedures" var-ct="_LoopCount" var-ix="_LoopIndex">
				<ForEach.Filter></ForEach.Filter>
				<ForEach.Body>

					<OutputScope name="${ModuleName}\${FolderName}\${ProcedureNameSingularPascalCase}_Result.g.cs">
						<Include name="include_gen_cprt_message.cs.txt" />
<![CDATA[

using System;
using System.Collections.Generic;
using System.Data;
using System.Xml;

using TextMetal.Middleware.Data.Models;
using TextMetal.Middleware.Data.Models.Functional;
using TextMetal.Middleware.Data.Impl.FreakazoidMapper.Mappings;
using TextMetal.Middleware.Solder.Utilities;
]]>
						<If>
							<If.Condition>
								<UnaryExpression operator="IsDef">
									<UnaryExpression.TheExpression>
										<Aspect name="ClrUsingNamespaces" />
									</UnaryExpression.TheExpression>
								</UnaryExpression>
							</If.Condition>
							<If.True>
								<ForEach in="ClrUsingNamespaces" var-ct="_LoopCount" var-ix="_LoopIndex" var-item="_LoopItem">
									<ForEach.Body>
										<![CDATA[using ${_LoopItem};
]]>
									</ForEach.Body>
								</ForEach>
							</If.True>
						</If>
						<![CDATA[
namespace ${ClrNamespace}.${FolderName}
{
	[Serializable]
	public partial class ${ProcedureNameSingularPascalCase}_Result : ${rb(`textMetal.EvaluateToken("HasAnyMappedResultColumns".to_clr_string()) ? textMetal.EvaluateToken("ResultProcedureModelClrSuperType".to_clr_string()) : textMetal.EvaluateToken("DynamicResultProcedureModelClrSuperType".to_clr_string())`)}, I${ProcedureNameSingularPascalCase}_Result
	{
		#region Constructors/Destructors

		public ${ProcedureNameSingularPascalCase}_Result()
		{
		}

		#endregion

		#region Fields/Constants

]]>

					<ForEach in="Columns" var-ct="_LoopCount" var-ix="_LoopIndex">
						<ForEach.Body>
							<![CDATA[		public const string COLUMN_NAME_${ColumnNameConstantCase} = "${ColumnName}";]]>

							<If>
								<If.Condition>
									<BinaryExpression operator="Ne">
										<BinaryExpression.LeftExpression>
											<Facet name="_LoopCount" />
										</BinaryExpression.LeftExpression>
										<BinaryExpression.RightExpression>
											<Facet name="_LoopIndex" />
										</BinaryExpression.RightExpression>
									</BinaryExpression>
								</If.Condition>
								<If.True>
<![CDATA[
]]>
								</If.True>
							</If>
						</ForEach.Body>
					</ForEach>
<![CDATA[

]]>
						<ForEach in="Columns" var-ct="_LoopCount" var-ix="_LoopIndex">
							<ForEach.Filter></ForEach.Filter>
							<ForEach.Body>

								<![CDATA[		private ${ColumnCSharpClrNullableType} @${ColumnNameCamelCase};]]>

								<If>
									<If.Condition>
										<BinaryExpression operator="Ne">
											<BinaryExpression.LeftExpression>
												<Facet name="_LoopCount" />
											</BinaryExpression.LeftExpression>
											<BinaryExpression.RightExpression>
												<Facet name="_LoopIndex" />
											</BinaryExpression.RightExpression>
										</BinaryExpression>
									</If.Condition>
									<If.True>
										<![CDATA[
]]>
									</If.True>
								</If>
							</ForEach.Body>
						</ForEach>

<![CDATA[

		#endregion

		#region Properties/Indexers/Events
]]>
						<ForEach in="Columns" var-ct="_LoopCount" var-ix="_LoopIndex">
							<ForEach.Filter></ForEach.Filter>
							<ForEach.Body>

								<![CDATA[
		[ColumnMapping(ColumnOrdinal = ${ColumnOrdinal}, ColumnName = "${ColumnName}", ColumnSqlType = "${ColumnSqlType}",
			ColumnDbType = ${ColumnCSharpDbType}, ColumnSize = ${ColumnSize}, ColumnPrecision = ${ColumnPrecision}, ColumnScale = ${ColumnScale},
			ColumnNullable = ${ColumnCSharpNullableLiteral}, ColumnIsPrimaryKey = false,
			ColumnIsComputed = false, ColumnIsIdentity = false, ColumnIsAnonymous = ${ColumnCSharpIsAnonymousLiteral})]
		public ${ColumnCSharpClrNullableType} @${ColumnNamePascalCase}
		{
			get
			{
				return this.@${ColumnNameCamelCase};
			}
			set
			{
				if (!DataTypeFascade.Instance.ObjectsEqualValueSemantics(this.@${ColumnNameCamelCase}, value))
				{
					this.@${ColumnNameCamelCase} = value;
					this.OnPropertyChanged(COLUMN_NAME_${ColumnNameConstantCase});
				}
			}
		}
]]>
							</ForEach.Body>
						</ForEach>
<![CDATA[
		#endregion
	}
}
]]>
					</OutputScope>
				</ForEach.Body>
			</ForEach>

		</ForEach.Body>
	</ForEach>

</Template>
