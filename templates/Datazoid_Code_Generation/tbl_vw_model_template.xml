<?xml version="1.0" encoding="utf-8"?>

<!--
	Copyright Â©2020-2021 WellEngineered.us, all rights reserved.
	Distributed under the MIT license: http://www.opensource.org/licenses/mit-license.php
-->
<Template xmlns="http://www.textmetal.com/api/v6.0.0">
	<Alloc token="FolderName" />

	<ForEach in="Schemas" var-ct="_LoopCount" var-ix="_LoopIndex">
		<ForEach.Filter></ForEach.Filter>
		<ForEach.Body>

			<ForEach in="Tables" var-ct="_LoopCount" var-ix="_LoopIndex">
				<ForEach.Filter></ForEach.Filter>
				<ForEach.Body>

					<If>
						<If.Condition>
							<UnaryExpression operator="Not">
								<UnaryExpression.TheExpression>
									<Facet name="IsView" />
								</UnaryExpression.TheExpression>
							</UnaryExpression>
						</If.Condition>
						<If.True>
							<Assign token="FolderName">
								<Assign.Expression>
									<Value data="Tables" />
								</Assign.Expression>
							</Assign>
						</If.True>
					</If>

					<If>
						<If.Condition>
							<Facet name="IsView" />
						</If.Condition>
						<If.True>
							<Assign token="FolderName">
								<Assign.Expression>
									<Value data="Views" />
								</Assign.Expression>
							</Assign>
						</If.True>
					</If>

					<OutputScope name="${ModuleName}\${FolderName}\${TableNameSingularPascalCase}.g.cs">
						<Include name="include_gen_cprt_message.cs.txt" />
<![CDATA[

using System;
using System.Collections.Generic;
using System.Data;
using System.Xml;

using TextMetal.Middleware.Data.Models;
using TextMetal.Middleware.Data.Models.Tabular;
using TextMetal.Middleware.Data.Impl.FreakazoidMapper.Mappings;
using TextMetal.Middleware.Solder.Utilities;
]]>
						<If>
							<If.Condition>
								<UnaryExpression operator="IsDef">
									<UnaryExpression.TheExpression>
										<Aspect name="ClrUsingNamespaces" />
									</UnaryExpression.TheExpression>
								</UnaryExpression>
							</If.Condition>
							<If.True>
								<ForEach in="ClrUsingNamespaces" var-ct="_LoopCount" var-ix="_LoopIndex" var-item="_LoopItem">
									<ForEach.Body>
										<![CDATA[using ${_LoopItem};
]]>
									</ForEach.Body>
								</ForEach>
							</If.True>
						</If>
						<![CDATA[
namespace ${ClrNamespace}.${FolderName}
{
	[Serializable]
	[TableMapping(SchemaName = "${SchemaName}", TableName = "${TableName}", IsView = ${CSharpIsViewLiteral})]
	public partial class ${TableNameSingularPascalCase} : ${rb(`textMetal.EvaluateToken("HasAnyMappedColumns".to_clr_string()) ? textMetal.EvaluateToken("TableModelClrSuperType".to_clr_string()) : textMetal.EvaluateToken("DynamicTableModelClrSuperType".to_clr_string())`)}, I${TableNameSingularPascalCase}
	{
		#region Constructors/Destructors

		public ${TableNameSingularPascalCase}()
		{
		}

		#endregion

		#region Fields/Constants

		public const string SCHEMA_NAME = "${SchemaName}";
		public const string TABLE_NAME = "${TableName}";
]]>

					<ForEach in="Columns" var-ct="_LoopCount" var-ix="_LoopIndex">
						<ForEach.Body>
							<![CDATA[		public const string COLUMN_NAME_${ColumnNameConstantCase} = "${ColumnName}";]]>

							<If>
								<If.Condition>
									<BinaryExpression operator="Ne">
										<BinaryExpression.LeftExpression>
											<Facet name="_LoopCount" />
										</BinaryExpression.LeftExpression>
										<BinaryExpression.RightExpression>
											<Facet name="_LoopIndex" />
										</BinaryExpression.RightExpression>
									</BinaryExpression>
								</If.Condition>
								<If.True>
<![CDATA[
]]>
								</If.True>
							</If>
						</ForEach.Body>
					</ForEach>

<![CDATA[
]]>

						<If>
							<If.Condition>
								<BinaryExpression operator="And">
									<BinaryExpression.LeftExpression>
										<BinaryExpression operator="Eq">
											<BinaryExpression.LeftExpression>
												<Value type="System.Boolean" data="false" />
											</BinaryExpression.LeftExpression>
											<BinaryExpression.RightExpression>
												<Facet name="HasSingleColumnServerGeneratedPrimaryKey" />
											</BinaryExpression.RightExpression>
										</BinaryExpression>
									</BinaryExpression.LeftExpression>
									<BinaryExpression.RightExpression>
										<BinaryExpression operator="Eq">
											<BinaryExpression.LeftExpression>
												<Facet name="IsView" />
											</BinaryExpression.LeftExpression>
											<BinaryExpression.RightExpression>
												<Value type="System.Boolean" data="false" />
											</BinaryExpression.RightExpression>
										</BinaryExpression>
									</BinaryExpression.RightExpression>
								</BinaryExpression>
							</If.Condition>
							<If.True>
								<![CDATA[
		private bool isNew = true;]]>
							</If.True>
						</If>

						<ForEach in="Columns" var-ct="_LoopCount" var-ix="_LoopIndex">
							<ForEach.Body>
								<![CDATA[
		private ${ColumnCSharpClrNullableType} @${ColumnNameCamelCase};]]>
							</ForEach.Body>
						</ForEach>
						<![CDATA[

		#endregion

		#region Properties/Indexers/Events
]]>
						<If>
							<If.Condition>
								<BinaryExpression operator="And">
									<BinaryExpression.LeftExpression>
										<BinaryExpression operator="Eq">
											<BinaryExpression.LeftExpression>
												<Value type="System.Boolean" data="false" />
											</BinaryExpression.LeftExpression>
											<BinaryExpression.RightExpression>
												<Facet name="HasSingleColumnServerGeneratedPrimaryKey" />
											</BinaryExpression.RightExpression>
										</BinaryExpression>
									</BinaryExpression.LeftExpression>
									<BinaryExpression.RightExpression>
										<BinaryExpression operator="Eq">
											<BinaryExpression.LeftExpression>
												<Facet name="IsView" />
											</BinaryExpression.LeftExpression>
											<BinaryExpression.RightExpression>
												<Value type="System.Boolean" data="false" />
											</BinaryExpression.RightExpression>
										</BinaryExpression>
									</BinaryExpression.RightExpression>
								</BinaryExpression>
							</If.Condition>
							<If.True>
								<![CDATA[
		public override bool IsNew
		{
			get
			{
				return this.isNew;
			}
			set
			{
				this.isNew = value;
			}
		}

		public override object[] IdValues
		{
			get
			{
				return null;
			}
		}
		]]>
							</If.True>
						</If>

						<If>
							<If.Condition>
								<BinaryExpression operator="And">
									<BinaryExpression.LeftExpression>
										<BinaryExpression operator="Eq">
											<BinaryExpression.LeftExpression>
												<Value type="System.Boolean" data="true" />
											</BinaryExpression.LeftExpression>
											<BinaryExpression.RightExpression>
												<Facet name="HasSingleColumnServerGeneratedPrimaryKey" />
											</BinaryExpression.RightExpression>
										</BinaryExpression>
									</BinaryExpression.LeftExpression>
									<BinaryExpression.RightExpression>
										<BinaryExpression operator="Eq">
											<BinaryExpression.LeftExpression>
												<Facet name="IsView" />
											</BinaryExpression.LeftExpression>
											<BinaryExpression.RightExpression>
												<Value type="System.Boolean" data="false" />
											</BinaryExpression.RightExpression>
										</BinaryExpression>
									</BinaryExpression.RightExpression>
								</BinaryExpression>
							</If.Condition>
							<If.True>
								<![CDATA[
		public override bool IsNew
		{
			get
			{
				return ]]>

								<ForEach in="Columns" var-ct="_LoopCount" var-ix="_LoopIndex">
									<ForEach.Filter>
										<BinaryExpression operator="Eq">
											<BinaryExpression.LeftExpression>
												<Facet name="IsColumnServerGeneratedPrimaryKey" />
											</BinaryExpression.LeftExpression>
											<BinaryExpression.RightExpression>
												<Value type="System.Boolean" data="True" />
											</BinaryExpression.RightExpression>
										</BinaryExpression>
									</ForEach.Filter>
									<ForEach.Body>
										<![CDATA[this.@${ColumnNamePascalCase} == default(${ColumnCSharpClrNullableType})]]>
										<If>
											<If.Condition>
												<BinaryExpression operator="Ne">
													<BinaryExpression.LeftExpression>
														<Facet name="_LoopCount" />
													</BinaryExpression.LeftExpression>
													<BinaryExpression.RightExpression>
														<Facet name="_LoopIndex" />
													</BinaryExpression.RightExpression>
												</BinaryExpression>
											</If.Condition>
											<If.True>
												<![CDATA[ && ]]>
											</If.True>
										</If>
										<If>
											<If.Condition>
												<BinaryExpression operator="Eq">
													<BinaryExpression.LeftExpression>
														<Facet name="_LoopCount" />
													</BinaryExpression.LeftExpression>
													<BinaryExpression.RightExpression>
														<Facet name="_LoopIndex" />
													</BinaryExpression.RightExpression>
												</BinaryExpression>
											</If.Condition>
											<If.True>
												<![CDATA[;
]]>
											</If.True>
										</If>
									</ForEach.Body>
								</ForEach>

								<![CDATA[			}
			set
			{
				if(value)
					]]>

								<ForEach in="Columns" var-ct="_LoopCount" var-ix="_LoopIndex">
									<ForEach.Filter>
										<BinaryExpression operator="Eq">
											<BinaryExpression.LeftExpression>
												<Facet name="IsColumnServerGeneratedPrimaryKey" />
											</BinaryExpression.LeftExpression>
											<BinaryExpression.RightExpression>
												<Value type="System.Boolean" data="True" />
											</BinaryExpression.RightExpression>
										</BinaryExpression>
									</ForEach.Filter>
									<ForEach.Body>
										<![CDATA[this.@${ColumnNamePascalCase}]]>
										<If>
											<If.Condition>
												<BinaryExpression operator="Ne">
													<BinaryExpression.LeftExpression>
														<Facet name="_LoopCount" />
													</BinaryExpression.LeftExpression>
													<BinaryExpression.RightExpression>
														<Facet name="_LoopIndex" />
													</BinaryExpression.RightExpression>
												</BinaryExpression>
											</If.Condition>
											<If.True>
												<![CDATA[ = ]]>
											</If.True>
										</If>
										<If>
											<If.Condition>
												<BinaryExpression operator="Eq">
													<BinaryExpression.LeftExpression>
														<Facet name="_LoopCount" />
													</BinaryExpression.LeftExpression>
													<BinaryExpression.RightExpression>
														<Facet name="_LoopIndex" />
													</BinaryExpression.RightExpression>
												</BinaryExpression>
											</If.Condition>
											<If.True>
												<![CDATA[ =  default(${ColumnCSharpClrNullableType});
]]>
											</If.True>
										</If>
									</ForEach.Body>
								</ForEach>

								<![CDATA[			}
		}

		public override object[] IdValues
		{
			get
			{
				return new object[] { ]]>

								<ForEach in="Columns" var-ct="_LoopCount" var-ix="_LoopIndex">
									<ForEach.Filter>
										<BinaryExpression operator="Eq">
											<BinaryExpression.LeftExpression>
												<Facet name="IsColumnServerGeneratedPrimaryKey" />
											</BinaryExpression.LeftExpression>
											<BinaryExpression.RightExpression>
												<Value type="System.Boolean" data="True" />
											</BinaryExpression.RightExpression>
										</BinaryExpression>
									</ForEach.Filter>
									<ForEach.Body>
										<![CDATA[this.@${ColumnNamePascalCase}]]>
										<If>
											<If.Condition>
												<BinaryExpression operator="Ne">
													<BinaryExpression.LeftExpression>
														<Facet name="_LoopCount" />
													</BinaryExpression.LeftExpression>
													<BinaryExpression.RightExpression>
														<Facet name="_LoopIndex" />
													</BinaryExpression.RightExpression>
												</BinaryExpression>
											</If.Condition>
											<If.True>
												<![CDATA[, ]]>
											</If.True>
										</If>
										<If>
											<If.Condition>
												<BinaryExpression operator="Eq">
													<BinaryExpression.LeftExpression>
														<Facet name="_LoopCount" />
													</BinaryExpression.LeftExpression>
													<BinaryExpression.RightExpression>
														<Facet name="_LoopIndex" />
													</BinaryExpression.RightExpression>
												</BinaryExpression>
											</If.Condition>
											<If.True>
												<![CDATA[ };
]]>
											</If.True>
										</If>
									</ForEach.Body>
								</ForEach>

								<![CDATA[			}
		}
		]]>
							</If.True>
						</If>

						<If>
							<If.Condition>
								<BinaryExpression operator="Eq">
									<BinaryExpression.LeftExpression>
										<Facet name="IsView" />
									</BinaryExpression.LeftExpression>
									<BinaryExpression.RightExpression>
										<Value type="System.Boolean" data="true" />
									</BinaryExpression.RightExpression>
								</BinaryExpression>
							</If.Condition>
							<If.True>
								<![CDATA[
		public override bool IsNew
		{
			get
			{
				throw new NotSupportedException(string.Format("The model type '{0}' does not support the IsNew property.", this.GetType().FullName));
			}
			set
			{
				throw new NotSupportedException(string.Format("The model type '{0}' does not support the IsNew property.", this.GetType().FullName));
			}
		}

		public override object[] IdValues
		{
			get
			{
				throw new NotSupportedException(string.Format("The model type '{0}' does not support the IdValues property.", this.GetType().FullName));
			}
		}
		]]>
							</If.True>
						</If>

						<ForEach in="Columns" var-ct="_LoopCount" var-ix="_LoopIndex">
							<ForEach.Body>
								<If>
									<If.Condition>
										<BinaryExpression operator="Or">
											<BinaryExpression.LeftExpression>
												<BinaryExpression operator="Eq">
													<BinaryExpression.LeftExpression>
														<Facet name="ColumnIsPrimaryKey" />
													</BinaryExpression.LeftExpression>
													<BinaryExpression.RightExpression>
														<Value type="System.Boolean" data="True" />
													</BinaryExpression.RightExpression>
												</BinaryExpression>
											</BinaryExpression.LeftExpression>
											<BinaryExpression.RightExpression>
												<BinaryExpression operator="Eq">
													<BinaryExpression.LeftExpression>
														<Facet name="HasNoDefinedPrimaryKeyColumns" />
													</BinaryExpression.LeftExpression>
													<BinaryExpression.RightExpression>
														<Value type="System.Boolean" data="True" />
													</BinaryExpression.RightExpression>
												</BinaryExpression>
											</BinaryExpression.RightExpression>
										</BinaryExpression>
									</If.Condition>
									<If.True>
										<![CDATA[
		/* PRIMARY_KEY */]]>
									</If.True>
								</If>

								<![CDATA[
		[ColumnMapping(ColumnOrdinal = ${ColumnOrdinal}, ColumnName = "${ColumnName}", ColumnSqlType = "${ColumnSqlType}",
			ColumnDbType = ${ColumnCSharpDbType}, ColumnSize = ${ColumnSize}, ColumnPrecision = ${ColumnPrecision}, ColumnScale = ${ColumnScale},
			ColumnNullable = ${ColumnCSharpNullableLiteral}, ColumnIsPrimaryKey = ${ColumnCSharpIsPrimaryKeyLiteral},
			ColumnIsComputed = ${ColumnCSharpIsComputedLiteral}, ColumnIsIdentity = ${ColumnCSharpIsIdentityLiteral}, ColumnIsAnonymous = ${ColumnCSharpIsAnonymousLiteral})]
		public ${ColumnCSharpClrNullableType} @${ColumnNamePascalCase}
		{
			get
			{
				return this.@${ColumnNameCamelCase};
			}
			set
			{
				if (!DataTypeFascade.Instance.ObjectsEqualValueSemantics(this.@${ColumnNameCamelCase}, value))
				{
					this.@${ColumnNameCamelCase} = value;
					this.OnPropertyChanged(COLUMN_NAME_${ColumnNameConstantCase});
				}
			}
		}
		]]>
							</ForEach.Body>
						</ForEach>
						<![CDATA[
		#endregion
	}
}
]]>
					</OutputScope>
				</ForEach.Body>
			</ForEach>

		</ForEach.Body>
	</ForEach>

</Template>
