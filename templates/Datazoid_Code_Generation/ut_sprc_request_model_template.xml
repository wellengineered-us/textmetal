<?xml version="1.0" encoding="utf-8"?>

<!--
	Copyright Â©2020-2021 WellEngineered.us, all rights reserved.
	Distributed under the MIT license: http://www.opensource.org/licenses/mit-license.php
-->
<Template xmlns="http://www.textmetal.com/api/v6.0.0">

	<Alloc token="FolderName" />

	<Assign token="FolderName">
		<Assign.Expression>
			<Value data="Procedures" />
		</Assign.Expression>
	</Assign>

	<ForEach in="Schemas" var-ct="_LoopCount" var-ix="_LoopIndex">
		<ForEach.Filter></ForEach.Filter>
		<ForEach.Body>

			<ForEach in="Procedures" var-ct="_LoopCount" var-ix="_LoopIndex">
				<ForEach.Filter></ForEach.Filter>
				<ForEach.Body>

					<OutputScope name="${ModuleName}.UnitTests\${FolderName}\${ProcedureNameSingularPascalCase}_RequestTests.g.cs">
						<Include name="include_gen_cprt_message.cs.txt" />
<![CDATA[

using System;
using System.Xml;

using NUnit.Framework;
]]>
						<If>
							<If.Condition>
								<UnaryExpression operator="IsDef">
									<UnaryExpression.TheExpression>
										<Aspect name="ClrUsingNamespaces" />
									</UnaryExpression.TheExpression>
								</UnaryExpression>
							</If.Condition>
							<If.True>
								<ForEach in="ClrUsingNamespaces" var-ct="_LoopCount" var-ix="_LoopIndex" var-item="_LoopItem">
									<ForEach.Body>
										<![CDATA[using ${_LoopItem};
]]>
									</ForEach.Body>
								</ForEach>
							</If.True>
						</If>
						<![CDATA[
using ${ClrNamespace}.${FolderName};

namespace ${ClrNamespace}.UnitTests.${FolderName}
{
	[TestFixture]
	public sealed class ${ProcedureNameSingularPascalCase}_RequestTests
	{
		#region Constructors/Destructors

		public ${ProcedureNameSingularPascalCase}_RequestTests()
		{
		}

		#endregion

		#region Methods/Operators

		[Test]
		public void ShouldCreate${ProcedureNameSingularPascalCase}Test()
		{
			I${ProcedureNameSingularPascalCase}_Request ${ProcedureNameSingularCamelCase}Request;

			${ProcedureNameSingularCamelCase}Request = new ${ProcedureNameSingularPascalCase}_Request();

]]>

						<ForEach in="Parameters" var-ct="_LoopCount" var-ix="_LoopIndex">
							<ForEach.Filter>
								<BinaryExpression operator="Eq">
									<BinaryExpression.LeftExpression>
										<Facet name="ParameterIsReadOnly" />
									</BinaryExpression.LeftExpression>
									<BinaryExpression.RightExpression>
										<Value type="System.Boolean" data="False" />
									</BinaryExpression.RightExpression>
								</BinaryExpression>
							</ForEach.Filter>
							<ForEach.Body>

								<![CDATA[			${ProcedureNameSingularCamelCase}Request.@${ParameterNamePascalCase} = default(${ParameterCSharpClrType});
			Assert.AreEqual(default(${ParameterCSharpClrType}), ${ProcedureNameSingularCamelCase}Request.@${ParameterNamePascalCase});
]]>

								<If>
									<If.Condition>
										<BinaryExpression operator="Ne">
											<BinaryExpression.LeftExpression>
												<Facet name="_LoopCount" />
											</BinaryExpression.LeftExpression>
											<BinaryExpression.RightExpression>
												<Facet name="_LoopIndex" />
											</BinaryExpression.RightExpression>
										</BinaryExpression>
									</If.Condition>
									<If.True>
										<![CDATA[
]]>
									</If.True>
								</If>
							</ForEach.Body>
						</ForEach>

						<![CDATA[		}

		#endregion
	}
}
]]>
					</OutputScope>
				</ForEach.Body>
			</ForEach>

		</ForEach.Body>
	</ForEach>

</Template>
